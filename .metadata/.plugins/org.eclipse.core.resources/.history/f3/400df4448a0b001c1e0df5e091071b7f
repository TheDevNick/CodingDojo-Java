package com.example.demo.controllers;

import java.util.*;

import javax.servlet.http.HttpSession;

import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import java.util.stream.Collectors;

import com.example.demo.classes.Hero;

@SpringBootApplication
@Controller
public class HeroController extends BaseController {
	
	@RequestMapping("/hero")
	public String listHeros(Model model, HttpSession session) {
		
		model.addAttribute("heros", this.getHeros(session));
		return "hero/listHeros.html";
	}
	
	@RequestMapping("/hero/add")
	public String getAddHeroForm() {
		return "hero/addHeroForm.html";
	}
	
	@PostMapping(path="/hero/add")
	public String addHero(
			@RequestParam(value="name") String name,
			@RequestParam(value="super_power") String superPower,
			@RequestParam(value="weakness") String weakness,
			RedirectAttributes redirectAttributes,
			HttpSession session
			) {
		
		if( name == "" || superPower == "" || weakness == "" ) {
			redirectAttributes.addFlashAttribute("errors", new ArrayList<String>(Arrays.asList("All fields are required")));
			return "redirect:/hero/add";
		}
		
		ArrayList<Hero> heros = this.getHeros(session);
		heros.add(new Hero(heros.size() + 1, name, superPower, weakness));
		this.saveHeros(heros, session);
		
		return "redirect:/hero";
	}
	
	@RequestMapping("/hero/delete/{heroId}")
	public String deleteHero(@PathVariable int heroId, HttpSession session, RedirectAttributes redirectAttributes) {
		
		Hero hero = this.getHero(heroId, session);
		
		if ( hero != null ) {
			ArrayList<Hero> heros = this.getHeros(session);
			this.saveHeros((ArrayList<Hero>) heros.stream().filter(h -> h.id != heroId).collect(Collectors.toList()), session);
			redirectAttributes.addFlashAttribute("messages", new ArrayList<String>(Arrays.asList(String.format("%s has been deleted", hero.name))));
		}
		
		return "redirect:/hero";
	}
	
	@RequestMapping("/hero/edit/{heroId}")
	public String editHero(@PathVariable int heroId, HttpSession session, Model model) {
		
		Hero hero = this.getHero(heroId, session);
		
		if( hero != null ) {
			model.addAttribute("heroId", hero.id);
			model.addAttribute("name", hero.name);
			model.addAttribute("superPower", hero.superPower);
			model.addAttribute("weakness", hero.weakness);
			return "hero/editHeroForm.html";
		}
		
		return "redirect:/";
	}
	
	@RequestMapping(path="/hero/update", method=RequestMethod.POST)
	public String updateHero(
			@RequestParam(value="heroId") int heroId,
			@RequestParam(value="name") String name,
			@RequestParam(value="super_power") String superPower,
			@RequestParam(value="weakness") String weakness,
			RedirectAttributes redirectAttributes,
			HttpSession session
			) {
		
		Hero hero = this.getHero(heroId, session);
		
		if( hero != null ) {
			hero.name = name;
			hero.superPower = superPower;
			hero.weakness = weakness;
			redirectAttributes.addFlashAttribute("messages", new ArrayList<String>(Arrays.asList(String.format("%s has been updated", name))));
		}
		
		return "redirect:/hero";
	}
	
}
